###############################################
@issuer_from_user_id = (user_id, api_version="0.1") ->
	base = "api/" + api_version + "/blockcert"
	base = Meteor.absoluteUrl(base)
	url = base + "/cert_issuer/" + user_id

	revocation_url = base + "/revocation_list/" + user_id
	introduction_url = base + "/introduction/" + user_id

	#todo: that should be Mooqita if the certificate signer is not the issuer
	issuer_profile = get_profile user_id
	issuer_avatar = get_avatar issuer_profile
	issuer_email = get_profile_mail issuer_profile
	issuer_name =	get_profile_name issuer_profile, false, false
	issuer_url =	if not issuer_profile.url then url else issuer_profile.url

	public_key =
		id: "ecdsa-koblitz-pubkey:msBCHdwaQ7N2ypBYupkp6uNxtr9Pg76imj"
		created: "2017-06-29T14:48:03.814936+00:00"

	issuer =
		"@context": [
			"https://w3id.org/openbadges/v2"
			"https://w3id.org/blockcerts/v2"]
		url: issuer_url
		name: issuer_name
		email: issuer_email
		type: "Profile"
		id: user_id
		image: issuer_avatar
		revocationList: revocation_url
		introductionURL: introduction_url
		publicKey: [public_key]

	return issuer

###############################################
@signature_from_user_id = (user_id, api_version="0.1") ->
	signer_profile = get_profile user_id
	signer_name =	get_profile_name signer_profile, false, false

	signature =
		jobTitle: "Not yet implemented",
		name: signer_name,
		type: ["SignatureLine", "Extension"]
		image: ""

	signatures = [signature]
	return signatures


###############################################
@gen_cert_template = (user) ->
	template_id = Random.id()
	template =
		id: template_id
		_id: template_id
		type	: "BadgeClass"

	res = store_document_unprotected EduCertTemplate, template, user, true
	msg = "EduCertTemplate (" + template._id + ") generated by: " + get_user_mail user
	log_event msg, event_logic, event_info

	return res


###############################################
@gen_cert_recipient = (issuer, template, recipient_mail) ->
	recipients = find_cert_recipient template._id, recipient_mail
	if recipients.count() > 0
		return recipients

	recipient_mail = recipient_mail.split("\n")[0]
	recipient_mail = recipient_mail.split("\r")[0]

	recipient =
		email: recipient_mail
		issuer_id: issuer._id
		public_key: ""
		display_name: ""
		cert_template_id: template._id

	res = store_document_unprotected EduCertRecipients, recipient, issuer, true
	send_mail recipient_mail, "You got a certificate", "link:"

	return res


###############################################
@gen_cert_assertion = (recipient, user) ->
	assertion = find_cert_assertions recipient
	if assertion.count() > 0
		return assertion.fetch()[0]._id

	assertion_date = new Date().toISOString()

	recipient_mail = recipient.email
	recipient_mail = recipient_mail.split("\n")[0]
	recipient_mail = recipient_mail.split("\r")[0]

	template = get_document_unprotected EduCertTemplate, recipient.cert_template_id
	badge_img = download_file EduCertTemplate, template._id, "image"

	assertion_id = Random.id()
	assertion =
		type: "Assertion"
		id: assertion_id
		issuedOn: assertion_date

		"@context": [
			"https://w3id.org/openbadges/v2"
			"https://w3id.org/blockcerts/v2"]

		badge:
			id: template._id
			type: "BadgeClass"
			name: template.title
			image: badge_img
			description: template.description

			criteria:
				narrative: "Not yet implemented"

			issuer: issuer_from_user_id recipient.issuer_id
			signatureLines: signature_from_user_id

		recipient:
			identity: recipient_mail,
			type: "email",
			hashed: false

		recipientProfile:
			publicKey: recipient.public_key,
			name: recipient.display_name,
			type: [
				"RecipientProfile",
				"Extension"]

		verification:
			publicKey: "",
			type: [
				"MerkleProofVerification2017",
				"Extension"]

	assertion_item =
		_id: assertion_id
		payload: assertion

	store_document_unprotected EduCertAssertions, assertion_item, user, true

	extract = require('png-chunks-extract')
	text = require('png-chunk-text')

	pack = unpack_item badge_img
	buf = base64_to_byte pack.data, badge_img.type
	chunks = extract(buf)
	chunks.splice(-1, 0, text.encode('openbadges', JSON.stringify(assertion)))

	return assertion_id


###############################################
@finalize_cert_assertion = (assertion, recipient, block_verification_public_key) ->
	assertion.recipientProfile.publicKey = recipient.block_profile_public_key
	assertion.recipientProfile.name = recipient.display_name
	assertion.verification.publicKey = block_verification_public_key


'''
	encode = require('png-chunks-encode')
	fs = require('fs')
	fs.writeFileSync('C:\\Users\\Markus\\workplace\\projects\\learning_moocita\\test-in.png',
			new Buffer(encode(chunks)))

	fs.writeFileSync('C:\\Users\\Markus\\workplace\\projects\\learning_moocita\\test-out.png',
			new Buffer(encode(chunks)))

	buffer = fs.readFileSync('C:\\Users\\Markus\\workplace\\projects\\learning_moocita\\test-out.png')
	chunks = extract(buffer)
'''