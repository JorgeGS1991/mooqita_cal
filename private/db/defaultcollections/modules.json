[
  {
    "title": "Variables",
    "description": "Learn variables",
    "content": "<div>Welcome learner! Today we are learning about variables in computer programming, but first take a look at this equation and let us know if it looks familiar.<br><p>X + 1=4<br><p>Is this familiar? Yes? No?<br><p>This is a standard equation, something you may have learned in algebra. In this case X=3, but X outside of that equation could represent any value.<br><p>Meaning that if we started an equation with X=, the value on the other side of the equal sign could be anything.<br><p>For example, we could say X=5000, or X=A, or X={1, 2, 3, 4 ,5}, or X=potato.<br><p>This is the essence of a variable. The concept is that you can assign one value to represent another value, or many values.<br><p>In computer science variable declaration statements look something like:<br><p>variable=value;<br><p>There are a lot reasons why we use variables.<br><p>To represent a value with a name that makes more sense.<br>feetInMiles=5280;<br><p>To use mathematics.<br>X=1;<br>Y=1;<br>Answer=X + Y;<br><p>To store many values. Colors={red, orange, yellow, green, blue, violet};<br><p>You might notice that there are lots of different types of things that can be stored into a variable. For many different programming languages this data type has to be declared before the variable so that the computer knows what type of data to expect. This looks something like:<br><p>(type of data) (name of variable)=(value)<br><p><BLOCKQUOTE>Example:<br>integer x=1<br>decimal x=1.5<br>character a=A<br></BLOCKQUOTE><p>If youâ€™re storing many values it may look like:<br><p>(type of data) (name of variable)={(value), (value), (value)...}<br><p><BLOCKQUOTE>Example:<br>array alphabet={a, b, c, d, e, f, g, h, i}<br></BLOCKQUOTE></div>",
    "module_number": 1,
    "subject": "comp_thinking",
    "published": true
  },
  {
     "title": "Program Structure",
     "description": "This section of the COBOL course will teach you about how to structure of a COBOL program would be setup and how it will run.",
     "content": "<h1>Program Structure</h1><p><strong>A COBOL program structure is built up of seven separate parts that consist of; Program -> Divisions -> Sections -> Paragraphs -> Sentences -> Statements -> Characters.</strong><p><p><strong>Sections: These are the logical subdivision of program logic. A section is essentially a collection of different paragraphs which are stringed together.</strong><p><p><strong>Paragraphs: These are a subdivision of the section, or the division. It has to be either a user-defined, or a predefined name followed by a period. It must consist of zero, or more sentences, or entries.</strong><p><p><strong>Sentences: These are a combination of one, or more statements. Sentences only appear in the Procedure division. All sentences in COBOL must end with a period.</strong><p><p><strong>Statements: These are meaningful COBOL statements that are used to perform some processing.</strong><p><p><strong>Characters: These are the lowest in the COBOL hierarchy. They are not visible.</strong>",
     "module_number": 1,
     "subject": "COBOL",
     "published": true
  },
  {
    "title": "Introduction to Conditional Statements",
    "description": "This lesson will contain a basic overview and introduction to conditional statements used in Python",
    "content": "<p>&lt;p&gt;A large component of programming is logic. Among other things, logical statements are crucial to the functionality of a good program. In the computational thinking module, you should have learned some basic examples and characteristics of conditional statements. This module will explore some conditional statements in Python, and show some examples of each. &lt;/p&gt;</p><p>&lt;p&gt;The notorious &amp;ldquo;If&amp;rdquo; statement!: An &amp;ldquo;If&amp;rdquo;statement is a basic conditional that is widely used in computer programming. It is also simple to understand. An &amp;ldquo;If&amp;rdquo; statement contains code that a program should execute - if a certain criteria is met. &lt;/p&gt;</p><p>&lt;p&gt;For example; If today is your birthday - execute the following action - &amp;ldquo;sing happy birthday!&amp;rdquo;. An &amp;ldquo;If&amp;rdquo; statement can be executed in Python by using the following syntax:&lt;/p&gt;</p><p>&lt;p&gt;If (expression or criteria) : execute statement&lt;/p&gt;</p><p>&lt;p&gt;For example, &lt;/p&gt;</p><p>&lt;p&gt;If x=3: print(&amp;ldquo;X equals 3!&amp;rdquo;)&lt;/p&gt;</p><p>&lt;p&gt;If (birthday = true) : print(&amp;ldquo;Happy Birthday&amp;rdquo;)&lt;/p&gt;</p><p>&lt;p&gt; The &amp;ldquo;if-else&amp;rdquo; statement: This is a classical logic statement that is an extension of the &amp;ldquo;if&amp;rdquo; conditional. The &amp;ldquo;if&amp;rdquo; conditional on its own checks for a certain criteria, and if true, executes an action. If the criteria is not met - then the program moves on and no action is taken. The &amp;ldquo;if-else&amp;rdquo; statement allows programmers to ensure than an action is taken. For example, if it is your birthday - the program should print - Happy Birthday. But what if it is not your birthday? Then some programmers might want the program to execute a simple action - like saying &amp;ldquo;Have a great day&amp;rdquo;. The &amp;ldquo;if-else&amp;rdquo; statement can be executed with the following syntax. &lt;/p&gt;</p><p>&lt;p&gt;If (expression or criteria) : execute statement Else: execute this statement&lt;/p&gt;</p><p>&lt;p&gt;For example,&lt;/p&gt;</p><p>&lt;p&gt;If x=3: print(&amp;ldquo;X equals 3!&amp;rdquo;) Else: print (&amp;ldquo;X does not equal 3&amp;rdquo;)&lt;/p&gt;</p><p>&lt;p&gt;If (birthday = true) : print(&amp;ldquo;Happy Birthday&amp;rdquo;) Else: print(&amp;ldquo;It is not your birthday, but have a great day!&amp;rdquo;) &lt;/p&gt;</p>",
    "module_number": 1,
    "subject": "python",
    "published": true
  }
]
